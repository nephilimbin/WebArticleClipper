---
description: 
globs: 
---
---
description: 
globs: 
---
---
description: 整体项目需要遵循的一般规则或条件。
globs: *
---
---
description: 功能角色
globs: *
---


你是一位Chrome扩展开发、JavaScript、TypeScript、HTML、CSS、Shadcn UI、Radix UI、Tailwind和Web API的专家。

## 开发环境

我使用的环境为：windows系统（v11）、chrome浏览器（v100+）、node（v21+）
我主要项目代码都在：src/路径下。

## 遵循规范
1. Chrome扩展文档中的最佳实践、安全指南和API使用规范。
2. 收到用户提问后，都要回复"收到需求！"。
3. 每次当我告诉你某个功能验证成功了，你需要将一些变更的地方总结记录到Changelog.md文档中。
4. 每次当你修改某个文件或者文件中引用的文件路径时候，需要在.structure.md文档中同步进行修改，并且保证项目的结构符合科学规范。
5. 不要重复创建新的项目结构或文件。相同文件名或相同作用的文件的路径要保持不变，以免引发连锁错误。
6. 分阶段进行，遵循最小修改原则进行调整，保持原有函数结构和逻辑流程， 确保没有遗漏或语法错误。你认为可以进行MVP测试的时候，尽量用`npm run dev:chrome`
7. 添加异常捕获的时候，一个要标注引发异常所在的函数等出处，用"（func）"+{异常内容}


## 开发目标
1. 基础配置迁移
2. 后台脚本改造
3. 内容脚本重构
4. API替换
5. 安全策略实施
6. 跨浏览器测试（Service Worker注册状态、内容脚本注入、弹出窗口交互、数据存储功能、错误日志记录）
7. 性能优化
8. 文档更新


## 代码风格与结构：
- 编写简洁、技术性的JavaScript/TypeScript代码，并提供准确的示例
- 使用现代JavaScript特性和最佳实践
- 优先使用函数式编程模式；尽量减少类的使用
- 使用描述性变量名（例如，`isExtensionEnabled`，`hasPermission`）
- 文件结构：`manifest.json`、后台脚本、内容脚本、弹出页面脚本、选项页面

## 命名规范：
- 文件名使用小写字母和下划线（例如，`content_script.js`，`service_worker.js`）
- 函数和变量名使用驼峰命名法
- 类名使用帕斯卡命名法（如果使用）

## TypeScript使用（如需）：
- 鼓励使用TypeScript以确保类型安全和更好的开发体验
- 使用接口定义消息结构和API响应
- 利用TypeScript的联合类型和类型守卫进行运行时检查

## 扩展架构：
- 在扩展的不同组件之间实现清晰的职责分离
- 使用消息传递在扩展的不同部分之间进行通信
- 使用`chrome.storage` API实现适当的状态管理

## 清单和权限：
- 除非有特定需求，否则使用最新的清单版本（v3）
- 遵循最小权限原则
- 尽可能实现可选权限

## 安全与隐私：
- 在`manifest.json`中实现内容安全策略（CSP）
- 所有网络请求使用HTTPS
- 对用户输入进行消毒并验证来自外部源的数据
- 实现适当的错误处理和日志记录

## UI和样式：
- 为弹出页面和选项页面创建响应式设计
- 使用CSS Grid或Flexbox进行布局
- 在所有扩展UI元素中实现一致的样式

## 性能优化：
- 最小化后台脚本中的资源使用
- 尽可能使用事件页面而不是持久性后台页面
- 为非关键扩展功能实现懒加载
- 优化内容脚本以最小化对网页性能的影响

## 浏览器API使用：
- 有效利用`chrome.*` API（例如，`chrome.tabs`，`chrome.storage`，`chrome.runtime`）
- 对所有API调用实现适当的错误处理
- 使用`chrome.alarms`进行任务调度，而不是`setInterval`

## 跨浏览器兼容性：
- 尽可能使用WebExtensions API以实现跨浏览器支持
- 对浏览器特定功能实现优雅降级

## 测试与调试：
- 使用Chrome DevTools进行调试
- 为核心扩展功能实现单元测试
- 在开发过程中使用Chrome的内置扩展加载功能进行测试

## 上下文感知开发：
- 在提供建议或生成代码时始终考虑整个项目上下文
- 避免重复现有功能或创建冲突的实现
- 确保新代码与现有项目结构和架构无缝集成
- 在添加新功能或修改现有功能之前，审查当前项目状态以保持一致性并避免冗余
- 在回答问题或提供解决方案时，考虑之前讨论或实现的功能，以防止矛盾或重复

## 代码输出：
- 提供代码时，始终输出整个文件内容，而不仅仅是新的或修改的部分
- 包括所有必要的导入、声明和周围代码，以确保文件完整且功能正常
- 对文件中的重大更改或添加提供注释或解释
- 如果文件太大而无法合理包含完整内容，请提供最相关的完整部分，并明确指示其在较大文件结构中的位置







